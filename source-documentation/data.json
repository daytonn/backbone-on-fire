{
    "project": {},
    "files": {
        "lib/serializers/nested_id_serializer.js": {
            "name": "lib/serializers/nested_id_serializer.js",
            "modules": {},
            "classes": {
                "NestedIdSerializer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/serializers/nested_model_serializer.js": {
            "name": "lib/serializers/nested_model_serializer.js",
            "modules": {},
            "classes": {
                "NestedModelSerializer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/serializers/root_prefix_serializer.js": {
            "name": "lib/serializers/root_prefix_serializer.js",
            "modules": {},
            "classes": {
                "RootPrefixSerializer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/application.js": {
            "name": "lib/application.js",
            "modules": {},
            "classes": {
                "Application": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/collection.js": {
            "name": "lib/collection.js",
            "modules": {},
            "classes": {
                "Collection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/collection_view.js": {
            "name": "lib/collection_view.js",
            "modules": {},
            "classes": {
                "CollectionView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/controller.js": {
            "name": "lib/controller.js",
            "modules": {},
            "classes": {
                "Controller": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/model.js": {
            "name": "lib/model.js",
            "modules": {},
            "classes": {
                "Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/namespace.js": {
            "name": "lib/namespace.js",
            "modules": {
                "Backbone.OnFire": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/route_creator.js": {
            "name": "lib/route_creator.js",
            "modules": {},
            "classes": {
                "RouteCreator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/view.js": {
            "name": "lib/view.js",
            "modules": {},
            "classes": {
                "View": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Backbone.OnFire": {
            "name": "Backbone.OnFire",
            "submodules": {},
            "classes": {
                "NestedIdSerializer": 1,
                "NestedModelSerializer": 1,
                "RootPrefixSerializer": 1,
                "Application": 1,
                "Collection": 1,
                "CollectionView": 1,
                "Controller": 1,
                "Model": 1,
                "RouteCreator": 1,
                "View": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/view.js",
            "line": 16,
            "description": "Public interface to Backbone On Fire global methods."
        }
    },
    "classes": {
        "NestedIdSerializer": {
            "name": "NestedIdSerializer",
            "shortname": "NestedIdSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone.OnFire",
            "file": "lib/serializers/nested_id_serializer.js",
            "line": 2,
            "description": "Serializer that works seemlessly with Rails\n[nested attributes](http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html)",
            "is_constructor": 1
        },
        "NestedModelSerializer": {
            "name": "NestedModelSerializer",
            "shortname": "NestedModelSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone.OnFire",
            "file": "lib/serializers/nested_model_serializer.js",
            "line": 2,
            "description": "Serializer that works seemlessly with Rails\n[nested attributes](http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html)",
            "is_constructor": 1
        },
        "RootPrefixSerializer": {
            "name": "RootPrefixSerializer",
            "shortname": "RootPrefixSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone.OnFire",
            "file": "lib/serializers/root_prefix_serializer.js",
            "line": 2,
            "description": "Serializer that works seemlessly with Rails\n[activemodel serializers](https://github.com/rails-api/active_model_serializers)",
            "is_constructor": 1
        },
        "Application": {
            "name": "Application",
            "shortname": "Application",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone.OnFire",
            "file": "lib/application.js",
            "line": 1,
            "description": "The Application serves as a namespace as\nwell as providing the interface to define\nand interact with the Backbone On Fire application."
        },
        "Collection": {
            "name": "Collection",
            "shortname": "Collection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone.OnFire",
            "file": "lib/collection.js",
            "line": 28,
            "description": "Collection class defines a `isNotEmpty` convenience\nmethod and binds all method to the collection context.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "models",
                    "description": "Array of models or attribute objects",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "Options object",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Collection constructor function.",
                "type": "Collection"
            },
            "example": [
                "\n    var myCollectionInstance = new Posts([\n      {\n        id: 1,\n        title: \"Collections In Backbone\"\n      },\n      {\n        id: 2,\n        title: \"Hello World!\"\n      }\n    ]);"
            ]
        },
        "CollectionView": {
            "name": "CollectionView",
            "shortname": "CollectionView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone.OnFire",
            "file": "lib/collection_view.js",
            "line": 3,
            "description": "CollectionView is a view specific to rendering\ncollections. A CollectionView contains\nthe boilerplate necessary to render each model in\na collection via a specified view, preventing the need\nfor eaching over a collection in a template.",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "Controller": {
            "name": "Controller",
            "shortname": "Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone.OnFire",
            "file": "lib/controller.js",
            "line": 1,
            "description": "A Controller manages routes and handles\nthe setup and coordination of views, models,\nand collections within a given root segment."
        },
        "Model": {
            "name": "Model",
            "shortname": "Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone.OnFire",
            "file": "lib/model.js",
            "line": 46,
            "description": "Backbone.OnFire models always parse when instantiated\nto ensure relationships are instantiated. All methods\nare also bound to the instance of the model.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "attributes",
                    "description": "\nWhen creating an instance of a model,\nyou can pass in the initial values of\nthe attributes, which will be set on\nthe model.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "\nIf you pass a `{collection: ...}` as\nthe options, the model gains a collection\nproperty that will be used to indicate\nwhich collection the model belongs to,\nand is used to help compute the model's\nurl. The model.collection property is\nnormally created automatically when you\nfirst add a model to a collection. Note\nthat the reverse is not true, as passing\nthis option to the constructor will not\nautomatically add the model to the collection.\nUseful, sometimes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "model instance.",
                "type": "Model"
            }
        },
        "RouteCreator": {
            "name": "RouteCreator",
            "shortname": "RouteCreator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone.OnFire",
            "namespace": "",
            "file": "lib/route_creator.js",
            "line": 1,
            "description": "Factory to create routes for a given controller.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "controller",
                    "description": "Controller to generate route for",
                    "type": "Controller"
                }
            ],
            "example": [
                "\n    new Backbone.OnFire.RouteCreator(controller);"
            ]
        },
        "View": {
            "name": "View",
            "shortname": "View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone.OnFire",
            "namespace": "",
            "file": "lib/view.js",
            "line": 16,
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "\nThere are several special options that, if passed,\nwill be attached directly to the view: `model`,\n`collection`, `el`, `id`, `className`, `tagName`,\n`attributes`, `renderLoadingMask` and `events`.\nIf the view defines an *initialize* function, it\nwill be called when the view is first created. If\nyou'd like to create a view that references an\nelement already in the DOM, pass in the element as\nan option: `new View({el: existingElement})`",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "view instance.",
                "type": "View"
            }
        }
    },
    "classitems": [
        {
            "file": "lib/serializers/nested_id_serializer.js",
            "line": 11,
            "description": "Deserialize the model data from the server to be parsed\nby the model. Automatically instantiates related models\nstated in the `relationships` object with the ids given\nin the related ids array.",
            "itemtype": "method",
            "name": "deserialize",
            "return": {
                "description": "json data with instantiated relationship attributes from ids.",
                "type": "Object"
            },
            "class": "NestedIdSerializer"
        },
        {
            "file": "lib/serializers/nested_model_serializer.js",
            "line": 11,
            "description": "Serializes the model and it's nested attributes for\npersisting to the server. Nested relationship keys\nwill be suffixed with `_attributes` for transparent\ncompatability with [nested attributes](http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html)",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "serialized model json.",
                "type": "Object"
            },
            "class": "NestedModelSerializer"
        },
        {
            "file": "lib/serializers/nested_model_serializer.js",
            "line": 37,
            "description": "Deserialize the model data from the server to be parsed\nby the model. Automatically instantiates related models\nstated in the `relationships` object.",
            "itemtype": "method",
            "name": "deserialize",
            "return": {
                "description": "json data with instantiated relationship attributes.",
                "type": "Object"
            },
            "class": "NestedModelSerializer"
        },
        {
            "file": "lib/serializers/nested_model_serializer.js",
            "line": 64,
            "description": "Converts nested relationship attributes to json.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "Model json with relationship attributes as json as well.",
                "type": "Object"
            },
            "class": "NestedModelSerializer"
        },
        {
            "file": "lib/serializers/nested_model_serializer.js",
            "line": 86,
            "description": "Determine if a given class is a collection.",
            "itemtype": "method",
            "name": "isCollection",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "Class",
                    "description": "Suspect class.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    isCollection(SomeCollection); // true\n    isCollection(SomeModel); // false"
            ],
            "class": "NestedModelSerializer"
        },
        {
            "file": "lib/serializers/root_prefix_serializer.js",
            "line": 11,
            "description": "Prefixes the model with the root key for seemless\nintegration with [activemodel serializers](https://github.com/rails-api/active_model_serializers)",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "serialized model json.",
                "type": "Object"
            },
            "class": "RootPrefixSerializer"
        },
        {
            "file": "lib/serializers/root_prefix_serializer.js",
            "line": 28,
            "description": "Deserialize the model data from the server to be parsed\nby the model. Automatically instantiates related models\nstated in the `relationships` object.",
            "itemtype": "method",
            "name": "deserialize",
            "return": {
                "description": "json data with instantiated relationship attributes.",
                "type": "Object"
            },
            "class": "RootPrefixSerializer"
        },
        {
            "file": "lib/serializers/root_prefix_serializer.js",
            "line": 41,
            "description": "Converts nested relationship attributes to json.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "Model json with relationship attributes as json as well.",
                "type": "Object"
            },
            "class": "RootPrefixSerializer"
        },
        {
            "file": "lib/application.js",
            "line": 13,
            "description": "Namespace to contain Model constructors.",
            "itemtype": "property",
            "name": "Models",
            "type": "Object",
            "default": "{}",
            "class": "Application"
        },
        {
            "file": "lib/application.js",
            "line": 21,
            "description": "Namespace to contain Collection constructors.",
            "itemtype": "property",
            "name": "Collections",
            "type": "Object",
            "default": "{}",
            "class": "Application"
        },
        {
            "file": "lib/application.js",
            "line": 29,
            "description": "Namespace to contain View constructors.",
            "itemtype": "property",
            "name": "Views",
            "type": "Object",
            "default": "{}",
            "class": "Application"
        },
        {
            "file": "lib/application.js",
            "line": 37,
            "description": "Namespace to contain Controller constructors.",
            "itemtype": "property",
            "name": "Controllers",
            "type": "Object",
            "default": "{}",
            "class": "Application"
        },
        {
            "file": "lib/application.js",
            "line": 47,
            "description": "Global event dispatcher to coordinate events.",
            "itemtype": "property",
            "name": "Dispatcher",
            "type": "Backbone.Events",
            "default": "_.clone(Backbone.Events)",
            "class": "Application"
        },
        {
            "file": "lib/application.js",
            "line": 58,
            "description": "Create a Controller constructor and an\ninstance attached to the application object.\nAll Controller methods will be bound to\nit's context when instantiated.",
            "itemtype": "method",
            "name": "createController",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Controller name",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options object which\ndefines methods and properties of the\nController constructor.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Instance of the created Controller",
                "type": "Controller"
            },
            "example": [
                "\n    App.createController(\"PostsController\", {\n      route: ['show/:id', 'edit/:id'],\n\n      index: function() {\n        // do index stuff\n      },\n\n      show: function(id) {\n        // do show stuff\n      },\n\n      edit: function(id) {\n        // do edit stuff\n      }\n    });"
            ],
            "class": "Application"
        },
        {
            "file": "lib/application.js",
            "line": 106,
            "description": "Create a Model constructor.",
            "itemtype": "method",
            "name": "createModel",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Model name",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options object which\ndefines methods and properties of the\nModel constructor.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Model constructor function",
                "type": "Model"
            },
            "example": [
                "\n    App.createModel(\"Post\", {\n      urlRoot: \"posts\"\n    });"
            ],
            "class": "Application"
        },
        {
            "file": "lib/application.js",
            "line": 135,
            "description": "Create a Collection constructor.",
            "itemtype": "method",
            "name": "createCollection",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Collection name",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options object which\ndefines methods and properties of the\nCollection constructor.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Collection constructor function",
                "type": "Collection"
            },
            "example": [
                "\n    App.createCollection(\"Posts\", {\n      url: \"posts\",\n      model: App.Models.Post\n    });"
            ],
            "class": "Application"
        },
        {
            "file": "lib/application.js",
            "line": 164,
            "description": "Initialize the application and start the history.",
            "itemtype": "method",
            "name": "start",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options object",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Application"
        },
        {
            "file": "lib/application.js",
            "line": 181,
            "description": "Create a Backbone On Fire application.",
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options object",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "New Backbone On Fire Application",
                "type": "Application"
            },
            "example": [
                "\n    var App = Backbone.OnFire.Application.create();"
            ],
            "class": "Application"
        },
        {
            "file": "lib/collection.js",
            "line": 3,
            "description": "Default Backbone.Collection methods to ignore\nwhen binding functions to the instance context.",
            "access": "private",
            "tagname": "",
            "type": "Array",
            "itemtype": "property",
            "name": "collectionMethods",
            "class": "Collection"
        },
        {
            "file": "lib/collection.js",
            "line": 14,
            "static": 1,
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "properties",
                    "description": "Object defining methods and\nproperties of the collection",
                    "type": "Object"
                },
                {
                    "name": "classProperties",
                    "description": "Object defining class-level\nproperties of the collection.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n    var Posts = Backbone.OnFire.Collection.extend({\n      url: \"/posts\",\n      model: Post\n    });"
            ],
            "class": "Collection"
        },
        {
            "file": "lib/collection.js",
            "line": 57,
            "description": "Convenience method to check if the colleciton\nhas items.",
            "itemtype": "method",
            "name": "isNotEmpty",
            "return": {
                "description": "Whether or not the collection contains models.",
                "type": "Boolean"
            },
            "class": "Collection"
        },
        {
            "file": "lib/controller.js",
            "line": 12,
            "description": "Initialization function called when a\ncontroller is instantiated. By default\n`initialize` is a noop left to be implemented\nby the child class.",
            "itemtype": "method",
            "name": "initialize",
            "class": "Controller"
        },
        {
            "file": "lib/controller.js",
            "line": 21,
            "description": "Convenience method to call through to the\ndispatcher and register events.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "\nName of the event to register.",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "\nFunction to be called when the event\nis triggered.",
                    "type": "Function"
                }
            ],
            "class": "Controller"
        },
        {
            "file": "lib/controller.js",
            "line": 33,
            "description": "Convenience method to call through to the\ndispatcher and deregister events.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "event",
                    "description": "Name of the event to deregister.",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "\nHandler function to remove a specific\nevent handler. If handler is ommitted\nall events attached to the event will\nbe removed.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Controller"
        },
        {
            "file": "lib/controller.js",
            "line": 46,
            "description": "Route definitions for the controller.",
            "itemtype": "property",
            "name": "routes",
            "type": "Array",
            "default": "[]",
            "class": "Controller"
        },
        {
            "file": "lib/controller.js",
            "line": 56,
            "description": "Creates a method on the controller\nwhich calls the given method on the dispatcher.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "dispatcherMethod",
            "class": "Controller"
        },
        {
            "file": "lib/controller.js",
            "line": 70,
            "description": "Validate controller name is defined\nand is a `String`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "validateName",
            "params": [
                {
                    "name": "name",
                    "description": "Controller name.",
                    "type": "String"
                }
            ],
            "class": "Controller"
        },
        {
            "file": "lib/controller.js",
            "line": 83,
            "description": "Convenience method to create vanilla Controller constructors.\nAll controller methods are bound when the controller is instantiated.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "itemtype": "method",
            "name": "defaultController",
            "params": [
                {
                    "name": "name",
                    "description": "Controller name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Vanilla Controller constructor function.",
                "type": "Controller"
            },
            "class": "Controller"
        },
        {
            "file": "lib/controller.js",
            "line": 103,
            "description": "Convenience method to extend a given Controller\nprototype with an options object.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "extendController",
            "params": [
                {
                    "name": "Controller",
                    "description": "A Controller constructor.",
                    "type": "Controller"
                },
                {
                    "name": "options",
                    "description": "Options object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Controller"
        },
        {
            "file": "lib/controller.js",
            "line": 119,
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of controller.\nThe \"Controller\" suffix will be added if ommitted.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Optional methods and properties\nbelonging to the Controller constrcutor's prototype.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n    Backbone.OnFire.Controller.extend({\n      route: ['show/:id', 'edit/:id'],\n\n      index: function() {\n        // do index stuff\n      },\n\n      show: function(id) {\n        // do show stuff\n      },\n\n      edit: function(id) {\n        // do edit stuff\n      },\n    });"
            ],
            "class": "Controller"
        },
        {
            "file": "lib/model.js",
            "line": 4,
            "static": 1,
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "properties",
                    "description": "Object defining methods and\nproperties of the model.",
                    "type": "Object"
                },
                {
                    "name": "classProperties",
                    "description": "Object defining class-level\nproperties and methods of the model.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n    var Post = Backbone.OnFire.Model.extend({\n      urlRoot: \"/posts\"\n    });"
            ],
            "class": "Model"
        },
        {
            "file": "lib/model.js",
            "line": 17,
            "description": "Relationships object defining key/constructor\npairs to enable creation of nested model instances\nwhen the given keys are present in the JSON payload.",
            "itemtype": "property",
            "name": "relationships",
            "type": "Object",
            "default": "{}",
            "example": [
                "\n    var Post = Backbone.OnFire.Model.extend({\n      relationships: {\n        author: User, // User model.\n        relatedPosts: Posts // Posts collection.\n      }\n    });"
            ],
            "class": "Model"
        },
        {
            "file": "lib/model.js",
            "line": 35,
            "description": "Array of serializers that will be used\nwhen processing JSON payloads. Serializers\ncan define the behavior of `serialize`,\n`deserialize`, and `toJSON`.",
            "itemtype": "property",
            "name": "serializers",
            "type": "Array",
            "default": "[]",
            "class": "Model"
        },
        {
            "file": "lib/model.js",
            "line": 83,
            "description": "`deserialize` passes received JSON payload\nfrom the server through each serializer's\n`deserialize` method.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "data",
                    "description": "JSON to deserialize",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Deserialized JSON.",
                "type": "Object"
            },
            "class": "Model"
        },
        {
            "file": "lib/model.js",
            "line": 96,
            "description": "`serialize` passes the initial result of the\nmodel's `toJSON` method to be processed by\neach serializer's `serialize` method to send\na modified JSON payload to the server.",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "data",
                    "description": "JSON to serialize",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Serialized JSON.",
                "type": "Object"
            },
            "class": "Model"
        },
        {
            "file": "lib/model.js",
            "line": 110,
            "description": "`toJSON` passes an initial copy of the model's\n`_attributes` object to be parsed by each\nserializer's `toJSON` method for use as a plain\nJavaScript object.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "JSON object representing the model data.",
                "type": "Object"
            },
            "class": "Model"
        },
        {
            "file": "lib/model.js",
            "line": 123,
            "description": "`parse` converts the data received from\nthe server using the `deserialize` method.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "data",
                    "description": "Model data that has been set/changed.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Parsed data.",
                "type": "Object"
            },
            "class": "Model"
        },
        {
            "file": "lib/model.js",
            "line": 137,
            "description": "Convenience method to determine if the model\nhas been persisted. This method is the inverse\nof `isNew`.",
            "itemtype": "method",
            "name": "isPersisted",
            "return": {
                "description": "Wheter or not the model has been persisted.",
                "type": "Boolean"
            },
            "class": "Model"
        },
        {
            "file": "lib/model.js",
            "line": 149,
            "description": "`set` parses the data before setting properties.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "String key of property of Object of key/value pairs",
                    "type": "String,Object"
                },
                {
                    "name": "value",
                    "description": "value of the defined key\n#param [options]  Options object",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Model"
        },
        {
            "file": "lib/model.js",
            "line": 165,
            "description": "Method to process json with all serializers.",
            "itemtype": "method",
            "name": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "method to call on the serializer",
                    "type": "String"
                },
                {
                    "name": "json",
                    "description": "json payload to serialize",
                    "type": "Object"
                }
            ],
            "class": "Model"
        },
        {
            "file": "lib/route_creator.js",
            "line": 26,
            "description": "Trim slashes from the beginning and ending of a string.",
            "itemtype": "method",
            "name": "trimSlashes",
            "params": [
                {
                    "name": "string",
                    "description": "String to trim.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Copy of string without beginning or ending slashes.",
                "type": "String"
            },
            "class": "RouteCreator",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/route_creator.js",
            "line": 37,
            "description": "Get the first segment of a given path.",
            "itemtype": "method",
            "name": "firstSegment",
            "params": [
                {
                    "name": "string",
                    "description": "Path.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "First segment of the path.",
                "type": "String"
            },
            "class": "RouteCreator",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/route_creator.js",
            "line": 48,
            "description": "Create an action/route mapping for the index action.",
            "itemtype": "method",
            "name": "createIndexRouteAction",
            "class": "RouteCreator",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/route_creator.js",
            "line": 64,
            "description": "Create route mappings for all of the Controller's routes.",
            "itemtype": "method",
            "name": "createRouteActions",
            "class": "RouteCreator",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/route_creator.js",
            "line": 76,
            "description": "Create route mappings for a given Controller's routes.",
            "itemtype": "method",
            "name": "createRouteActions",
            "params": [
                {
                    "name": "route",
                    "description": "A given route to create a mapping for.",
                    "type": "String"
                }
            ],
            "class": "RouteCreator",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/route_creator.js",
            "line": 87,
            "description": "Create a `rootSegment` based on the Controller name or the root.\nGiven a Controller name of PostsController, the `rootSegement`\nwould be set to `posts`. If a Controller defines a `root` property\nthe `root` property will be used instead.",
            "itemtype": "method",
            "name": "createRouteActions",
            "class": "RouteCreator",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/route_creator.js",
            "line": 98,
            "description": "Create route mappings on the Controller's router\nfor all of the Controller's routes.",
            "itemtype": "method",
            "name": "createRoutes",
            "class": "RouteCreator",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/route_creator.js",
            "line": 112,
            "itemtype": "method",
            "name": "normalizedControllerName",
            "return": {
                "description": "Controller name without the \"Controller\" suffix in lower case.",
                "type": "String"
            },
            "class": "RouteCreator",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/route_creator.js",
            "line": 120,
            "description": "Determine if the Controller has an explicit index route.",
            "itemtype": "method",
            "name": "hasIndexRoute",
            "return": {
                "description": "Whether or not the Controller defines an index route.",
                "type": "Boolean"
            },
            "class": "RouteCreator",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/route_creator.js",
            "line": 132,
            "itemtype": "method",
            "name": "getIndexRoute",
            "return": {
                "description": "The explicitly defined index route.",
                "type": "String"
            },
            "class": "RouteCreator",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/route_creator.js",
            "line": 142,
            "description": "Remove beginning and trailing slashes on all defined routes.",
            "itemtype": "method",
            "name": "normalizeRoutes",
            "class": "RouteCreator",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/route_creator.js",
            "line": 155,
            "description": "Ensure all routes have corresponding actions defined on the Controller.",
            "itemtype": "method",
            "name": "validateRoutes",
            "class": "RouteCreator",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/route_creator.js",
            "line": 171,
            "description": "Deterimine if this is the IndexController.",
            "itemtype": "method",
            "name": "isIndexController",
            "return": {
                "description": "Whether or not this controller is the IndexController.",
                "type": "Boolean"
            },
            "class": "RouteCreator",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/route_creator.js",
            "line": 180,
            "description": "Create default routes for the IndexController.",
            "itemtype": "method",
            "name": "createIndexRoutes",
            "class": "RouteCreator",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/view.js",
            "line": 3,
            "static": 1,
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "properties",
                    "description": "Object defining methods and\nproperties of the view.",
                    "type": "Object"
                },
                {
                    "name": "classProperties",
                    "description": "Object defining class-level\nproperties and methods of the view.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n    var PostView = Backbone.OnFire.View.extend({\n      el: \"#my-post\"\n    });"
            ],
            "class": "View",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/view.js",
            "line": 41,
            "description": "`toggleLoading` handles toggling a `.loading`\nclass to the model and prepending a loading mask\nto the view if `renderLoadingMask` is set to `true`.",
            "itemtype": "method",
            "name": "toggleLoading",
            "class": "View",
            "module": "Backbone.OnFire"
        },
        {
            "file": "lib/view.js",
            "line": 54,
            "description": "`toggleLoadingMask` handles the addition/removal\nof the loading mask element when `toggleLoading`\nis called.",
            "itemtype": "method",
            "name": "toggleLoadingMask",
            "class": "View",
            "module": "Backbone.OnFire"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: params with param",
            "line": " lib/model.js:46"
        }
    ]
}